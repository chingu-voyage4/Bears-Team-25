// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ArticleEdit empty component should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ArticleEdit
    empty={true}
    id=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(WithStyles(Paper))>
          <Heading1>
                    Create new article
          </Heading1>
          <WithStyles(List)>
                    <ListItemInput
                              disabled={false}
                              label="Title"
                              mobile={false}
                              name="title"
                              onChange={[Function]}
                              value=""
                    />
                    <ListItemInput
                              disabled={false}
                              label="Topic"
                              mobile={false}
                              name="topic"
                              onChange={[Function]}
                              value=""
                    />
                    <ListItemInput
                              disabled={false}
                              label="Sub topic"
                              mobile={false}
                              name="sub_topic"
                              onChange={[Function]}
                              value=""
                    />
          </WithStyles(List)>
          <styled.div>
                    <Styled(WithStyles(AppBar))
                              position="static"
                    >
                              <WithStyles(Tabs)
                                        fullWidth={false}
                                        indicatorColor="secondary"
                                        onChange={[Function]}
                                        value={0}
                              >
                                        <WithStyles(Tab)
                                                  disableRipple={true}
                                                  label="Markdown"
                                        />
                                        <WithStyles(Tab)
                                                  disableRipple={true}
                                                  label="Preview"
                                        />
                              </WithStyles(Tabs)>
                    </Styled(WithStyles(AppBar))>
                    <WithStyles(Paper)>
                              <Textarea
                                        multiline={true}
                                        name="content"
                                        onChange={[Function]}
                                        placeholder="Markdown flavored content here..."
                                        value={undefined}
                              />
                    </WithStyles(Paper)>
          </styled.div>
</Styled(WithStyles(Paper))>,
        <div>
          <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                    variant="raised"
          >
                    Save
          </WithStyles(Button)>
</div>,
        <WithStyles(Snackbar)
          SnackbarContentProps={
                    Object {
                              "aria-describedby": "message-id",
                            }
          }
          anchorOrigin={
                    Object {
                              "horizontal": "right",
                              "vertical": "top",
                            }
          }
          autoHideDuration={3000}
          message={
                    <span
                              id="message-id"
                    >
                              Something went wrong :(
                    </span>
          }
          onClose={[Function]}
          open={false}
/>,
      ],
      "mobile": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Heading1>
              Create new article
</Heading1>,
            <WithStyles(List)>
              <ListItemInput
                            disabled={false}
                            label="Title"
                            mobile={false}
                            name="title"
                            onChange={[Function]}
                            value=""
              />
              <ListItemInput
                            disabled={false}
                            label="Topic"
                            mobile={false}
                            name="topic"
                            onChange={[Function]}
                            value=""
              />
              <ListItemInput
                            disabled={false}
                            label="Sub topic"
                            mobile={false}
                            name="sub_topic"
                            onChange={[Function]}
                            value=""
              />
</WithStyles(List)>,
            <styled.div>
              <Styled(WithStyles(AppBar))
                            position="static"
              >
                            <WithStyles(Tabs)
                                          fullWidth={false}
                                          indicatorColor="secondary"
                                          onChange={[Function]}
                                          value={0}
                            >
                                          <WithStyles(Tab)
                                                        disableRipple={true}
                                                        label="Markdown"
                                          />
                                          <WithStyles(Tab)
                                                        disableRipple={true}
                                                        label="Preview"
                                          />
                            </WithStyles(Tabs)>
              </Styled(WithStyles(AppBar))>
              <WithStyles(Paper)>
                            <Textarea
                                          multiline={true}
                                          name="content"
                                          onChange={[Function]}
                                          placeholder="Markdown flavored content here..."
                                          value={undefined}
                            />
              </WithStyles(Paper)>
</styled.div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Create new article",
            },
            "ref": null,
            "rendered": "Create new article",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <ListItemInput
                  disabled={false}
                  label="Title"
                  mobile={false}
                  name="title"
                  onChange={[Function]}
                  value=""
/>,
                <ListItemInput
                  disabled={false}
                  label="Topic"
                  mobile={false}
                  name="topic"
                  onChange={[Function]}
                  value=""
/>,
                <ListItemInput
                  disabled={false}
                  label="Sub topic"
                  mobile={false}
                  name="sub_topic"
                  onChange={[Function]}
                  value=""
/>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Title",
                  "mobile": false,
                  "name": "title",
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Topic",
                  "mobile": false,
                  "name": "topic",
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Sub topic",
                  "mobile": false,
                  "name": "sub_topic",
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Styled(WithStyles(AppBar))
                  position="static"
>
                  <WithStyles(Tabs)
                                    fullWidth={false}
                                    indicatorColor="secondary"
                                    onChange={[Function]}
                                    value={0}
                  >
                                    <WithStyles(Tab)
                                                      disableRipple={true}
                                                      label="Markdown"
                                    />
                                    <WithStyles(Tab)
                                                      disableRipple={true}
                                                      label="Preview"
                                    />
                  </WithStyles(Tabs)>
</Styled(WithStyles(AppBar))>,
                <WithStyles(Paper)>
                  <Textarea
                                    multiline={true}
                                    name="content"
                                    onChange={[Function]}
                                    placeholder="Markdown flavored content here..."
                                    value={undefined}
                  />
</WithStyles(Paper)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(Tabs)
                    fullWidth={false}
                    indicatorColor="secondary"
                    onChange={[Function]}
                    value={0}
>
                    <WithStyles(Tab)
                                        disableRipple={true}
                                        label="Markdown"
                    />
                    <WithStyles(Tab)
                                        disableRipple={true}
                                        label="Preview"
                    />
</WithStyles(Tabs)>,
                  "position": "static",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(Tab)
                        disableRipple={true}
                        label="Markdown"
/>,
                      <WithStyles(Tab)
                        disableRipple={true}
                        label="Preview"
/>,
                    ],
                    "fullWidth": false,
                    "indicatorColor": "secondary",
                    "onChange": [Function],
                    "value": 0,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "disableRipple": true,
                        "label": "Markdown",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "disableRipple": true,
                        "label": "Preview",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Textarea
                    multiline={true}
                    name="content"
                    onChange={[Function]}
                    placeholder="Markdown flavored content here..."
                    value={undefined}
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "multiline": true,
                    "name": "content",
                    "onChange": [Function],
                    "placeholder": "Markdown flavored content here...",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="raised"
>
            Save
</WithStyles(Button)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Save",
            "color": "primary",
            "onClick": [Function],
            "variant": "raised",
          },
          "ref": null,
          "rendered": "Save",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "SnackbarContentProps": Object {
            "aria-describedby": "message-id",
          },
          "anchorOrigin": Object {
            "horizontal": "right",
            "vertical": "top",
          },
          "autoHideDuration": 3000,
          "message": <span
            id="message-id"
>
            Something went wrong :(
</span>,
          "onClose": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(WithStyles(Paper))>
            <Heading1>
                        Create new article
            </Heading1>
            <WithStyles(List)>
                        <ListItemInput
                                    disabled={false}
                                    label="Title"
                                    mobile={false}
                                    name="title"
                                    onChange={[Function]}
                                    value=""
                        />
                        <ListItemInput
                                    disabled={false}
                                    label="Topic"
                                    mobile={false}
                                    name="topic"
                                    onChange={[Function]}
                                    value=""
                        />
                        <ListItemInput
                                    disabled={false}
                                    label="Sub topic"
                                    mobile={false}
                                    name="sub_topic"
                                    onChange={[Function]}
                                    value=""
                        />
            </WithStyles(List)>
            <styled.div>
                        <Styled(WithStyles(AppBar))
                                    position="static"
                        >
                                    <WithStyles(Tabs)
                                                fullWidth={false}
                                                indicatorColor="secondary"
                                                onChange={[Function]}
                                                value={0}
                                    >
                                                <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Markdown"
                                                />
                                                <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Preview"
                                                />
                                    </WithStyles(Tabs)>
                        </Styled(WithStyles(AppBar))>
                        <WithStyles(Paper)>
                                    <Textarea
                                                multiline={true}
                                                name="content"
                                                onChange={[Function]}
                                                placeholder="Markdown flavored content here..."
                                                value={undefined}
                                    />
                        </WithStyles(Paper)>
            </styled.div>
</Styled(WithStyles(Paper))>,
          <div>
            <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                        variant="raised"
            >
                        Save
            </WithStyles(Button)>
</div>,
          <WithStyles(Snackbar)
            SnackbarContentProps={
                        Object {
                                    "aria-describedby": "message-id",
                                  }
            }
            anchorOrigin={
                        Object {
                                    "horizontal": "right",
                                    "vertical": "top",
                                  }
            }
            autoHideDuration={3000}
            message={
                        <span
                                    id="message-id"
                        >
                                    Something went wrong :(
                        </span>
            }
            onClose={[Function]}
            open={false}
/>,
        ],
        "mobile": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Heading1>
                Create new article
</Heading1>,
              <WithStyles(List)>
                <ListItemInput
                                disabled={false}
                                label="Title"
                                mobile={false}
                                name="title"
                                onChange={[Function]}
                                value=""
                />
                <ListItemInput
                                disabled={false}
                                label="Topic"
                                mobile={false}
                                name="topic"
                                onChange={[Function]}
                                value=""
                />
                <ListItemInput
                                disabled={false}
                                label="Sub topic"
                                mobile={false}
                                name="sub_topic"
                                onChange={[Function]}
                                value=""
                />
</WithStyles(List)>,
              <styled.div>
                <Styled(WithStyles(AppBar))
                                position="static"
                >
                                <WithStyles(Tabs)
                                                fullWidth={false}
                                                indicatorColor="secondary"
                                                onChange={[Function]}
                                                value={0}
                                >
                                                <WithStyles(Tab)
                                                                disableRipple={true}
                                                                label="Markdown"
                                                />
                                                <WithStyles(Tab)
                                                                disableRipple={true}
                                                                label="Preview"
                                                />
                                </WithStyles(Tabs)>
                </Styled(WithStyles(AppBar))>
                <WithStyles(Paper)>
                                <Textarea
                                                multiline={true}
                                                name="content"
                                                onChange={[Function]}
                                                placeholder="Markdown flavored content here..."
                                                value={undefined}
                                />
                </WithStyles(Paper)>
</styled.div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Create new article",
              },
              "ref": null,
              "rendered": "Create new article",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <ListItemInput
                    disabled={false}
                    label="Title"
                    mobile={false}
                    name="title"
                    onChange={[Function]}
                    value=""
/>,
                  <ListItemInput
                    disabled={false}
                    label="Topic"
                    mobile={false}
                    name="topic"
                    onChange={[Function]}
                    value=""
/>,
                  <ListItemInput
                    disabled={false}
                    label="Sub topic"
                    mobile={false}
                    name="sub_topic"
                    onChange={[Function]}
                    value=""
/>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Title",
                    "mobile": false,
                    "name": "title",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Topic",
                    "mobile": false,
                    "name": "topic",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Sub topic",
                    "mobile": false,
                    "name": "sub_topic",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Styled(WithStyles(AppBar))
                    position="static"
>
                    <WithStyles(Tabs)
                                        fullWidth={false}
                                        indicatorColor="secondary"
                                        onChange={[Function]}
                                        value={0}
                    >
                                        <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Markdown"
                                        />
                                        <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Preview"
                                        />
                    </WithStyles(Tabs)>
</Styled(WithStyles(AppBar))>,
                  <WithStyles(Paper)>
                    <Textarea
                                        multiline={true}
                                        name="content"
                                        onChange={[Function]}
                                        placeholder="Markdown flavored content here..."
                                        value={undefined}
                    />
</WithStyles(Paper)>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(Tabs)
                      fullWidth={false}
                      indicatorColor="secondary"
                      onChange={[Function]}
                      value={0}
>
                      <WithStyles(Tab)
                                            disableRipple={true}
                                            label="Markdown"
                      />
                      <WithStyles(Tab)
                                            disableRipple={true}
                                            label="Preview"
                      />
</WithStyles(Tabs)>,
                    "position": "static",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(Tab)
                          disableRipple={true}
                          label="Markdown"
/>,
                        <WithStyles(Tab)
                          disableRipple={true}
                          label="Preview"
/>,
                      ],
                      "fullWidth": false,
                      "indicatorColor": "secondary",
                      "onChange": [Function],
                      "value": 0,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "disableRipple": true,
                          "label": "Markdown",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "disableRipple": true,
                          "label": "Preview",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <Textarea
                      multiline={true}
                      name="content"
                      onChange={[Function]}
                      placeholder="Markdown flavored content here..."
                      value={undefined}
/>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "multiline": true,
                      "name": "content",
                      "onChange": [Function],
                      "placeholder": "Markdown flavored content here...",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="raised"
>
              Save
</WithStyles(Button)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Save",
              "color": "primary",
              "onClick": [Function],
              "variant": "raised",
            },
            "ref": null,
            "rendered": "Save",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "SnackbarContentProps": Object {
              "aria-describedby": "message-id",
            },
            "anchorOrigin": Object {
              "horizontal": "right",
              "vertical": "top",
            },
            "autoHideDuration": 3000,
            "message": <span
              id="message-id"
>
              Something went wrong :(
</span>,
            "onClose": [Function],
            "open": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`ArticleEdit should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ArticleEdit
    empty={false}
    id="123abc"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(WithStyles(Paper))>
          <Heading1>
                    Edit article
          </Heading1>
          <WithStyles(List)>
                    <ListItemInput
                              disabled={false}
                              label="Title"
                              mobile={false}
                              name="title"
                              onChange={[Function]}
                              value=""
                    />
                    <ListItemInput
                              disabled={false}
                              label="Topic"
                              mobile={false}
                              name="topic"
                              onChange={[Function]}
                              value=""
                    />
                    <ListItemInput
                              disabled={false}
                              label="Sub topic"
                              mobile={false}
                              name="sub_topic"
                              onChange={[Function]}
                              value=""
                    />
          </WithStyles(List)>
          <styled.div>
                    <Styled(WithStyles(AppBar))
                              position="static"
                    >
                              <WithStyles(Tabs)
                                        fullWidth={false}
                                        indicatorColor="secondary"
                                        onChange={[Function]}
                                        value={0}
                              >
                                        <WithStyles(Tab)
                                                  disableRipple={true}
                                                  label="Markdown"
                                        />
                                        <WithStyles(Tab)
                                                  disableRipple={true}
                                                  label="Preview"
                                        />
                              </WithStyles(Tabs)>
                    </Styled(WithStyles(AppBar))>
                    <WithStyles(Paper)>
                              <Textarea
                                        multiline={true}
                                        name="content"
                                        onChange={[Function]}
                                        placeholder="Markdown flavored content here..."
                                        value={undefined}
                              />
                    </WithStyles(Paper)>
          </styled.div>
</Styled(WithStyles(Paper))>,
        <div>
          <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                    variant="raised"
          >
                    Save
          </WithStyles(Button)>
</div>,
        <WithStyles(Snackbar)
          SnackbarContentProps={
                    Object {
                              "aria-describedby": "message-id",
                            }
          }
          anchorOrigin={
                    Object {
                              "horizontal": "right",
                              "vertical": "top",
                            }
          }
          autoHideDuration={3000}
          message={
                    <span
                              id="message-id"
                    >
                              Something went wrong :(
                    </span>
          }
          onClose={[Function]}
          open={false}
/>,
      ],
      "mobile": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Heading1>
              Edit article
</Heading1>,
            <WithStyles(List)>
              <ListItemInput
                            disabled={false}
                            label="Title"
                            mobile={false}
                            name="title"
                            onChange={[Function]}
                            value=""
              />
              <ListItemInput
                            disabled={false}
                            label="Topic"
                            mobile={false}
                            name="topic"
                            onChange={[Function]}
                            value=""
              />
              <ListItemInput
                            disabled={false}
                            label="Sub topic"
                            mobile={false}
                            name="sub_topic"
                            onChange={[Function]}
                            value=""
              />
</WithStyles(List)>,
            <styled.div>
              <Styled(WithStyles(AppBar))
                            position="static"
              >
                            <WithStyles(Tabs)
                                          fullWidth={false}
                                          indicatorColor="secondary"
                                          onChange={[Function]}
                                          value={0}
                            >
                                          <WithStyles(Tab)
                                                        disableRipple={true}
                                                        label="Markdown"
                                          />
                                          <WithStyles(Tab)
                                                        disableRipple={true}
                                                        label="Preview"
                                          />
                            </WithStyles(Tabs)>
              </Styled(WithStyles(AppBar))>
              <WithStyles(Paper)>
                            <Textarea
                                          multiline={true}
                                          name="content"
                                          onChange={[Function]}
                                          placeholder="Markdown flavored content here..."
                                          value={undefined}
                            />
              </WithStyles(Paper)>
</styled.div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Edit article",
            },
            "ref": null,
            "rendered": "Edit article",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <ListItemInput
                  disabled={false}
                  label="Title"
                  mobile={false}
                  name="title"
                  onChange={[Function]}
                  value=""
/>,
                <ListItemInput
                  disabled={false}
                  label="Topic"
                  mobile={false}
                  name="topic"
                  onChange={[Function]}
                  value=""
/>,
                <ListItemInput
                  disabled={false}
                  label="Sub topic"
                  mobile={false}
                  name="sub_topic"
                  onChange={[Function]}
                  value=""
/>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Title",
                  "mobile": false,
                  "name": "title",
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Topic",
                  "mobile": false,
                  "name": "topic",
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Sub topic",
                  "mobile": false,
                  "name": "sub_topic",
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Styled(WithStyles(AppBar))
                  position="static"
>
                  <WithStyles(Tabs)
                                    fullWidth={false}
                                    indicatorColor="secondary"
                                    onChange={[Function]}
                                    value={0}
                  >
                                    <WithStyles(Tab)
                                                      disableRipple={true}
                                                      label="Markdown"
                                    />
                                    <WithStyles(Tab)
                                                      disableRipple={true}
                                                      label="Preview"
                                    />
                  </WithStyles(Tabs)>
</Styled(WithStyles(AppBar))>,
                <WithStyles(Paper)>
                  <Textarea
                                    multiline={true}
                                    name="content"
                                    onChange={[Function]}
                                    placeholder="Markdown flavored content here..."
                                    value={undefined}
                  />
</WithStyles(Paper)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(Tabs)
                    fullWidth={false}
                    indicatorColor="secondary"
                    onChange={[Function]}
                    value={0}
>
                    <WithStyles(Tab)
                                        disableRipple={true}
                                        label="Markdown"
                    />
                    <WithStyles(Tab)
                                        disableRipple={true}
                                        label="Preview"
                    />
</WithStyles(Tabs)>,
                  "position": "static",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(Tab)
                        disableRipple={true}
                        label="Markdown"
/>,
                      <WithStyles(Tab)
                        disableRipple={true}
                        label="Preview"
/>,
                    ],
                    "fullWidth": false,
                    "indicatorColor": "secondary",
                    "onChange": [Function],
                    "value": 0,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "disableRipple": true,
                        "label": "Markdown",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "disableRipple": true,
                        "label": "Preview",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Textarea
                    multiline={true}
                    name="content"
                    onChange={[Function]}
                    placeholder="Markdown flavored content here..."
                    value={undefined}
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "multiline": true,
                    "name": "content",
                    "onChange": [Function],
                    "placeholder": "Markdown flavored content here...",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="raised"
>
            Save
</WithStyles(Button)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Save",
            "color": "primary",
            "onClick": [Function],
            "variant": "raised",
          },
          "ref": null,
          "rendered": "Save",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "SnackbarContentProps": Object {
            "aria-describedby": "message-id",
          },
          "anchorOrigin": Object {
            "horizontal": "right",
            "vertical": "top",
          },
          "autoHideDuration": 3000,
          "message": <span
            id="message-id"
>
            Something went wrong :(
</span>,
          "onClose": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(WithStyles(Paper))>
            <Heading1>
                        Edit article
            </Heading1>
            <WithStyles(List)>
                        <ListItemInput
                                    disabled={false}
                                    label="Title"
                                    mobile={false}
                                    name="title"
                                    onChange={[Function]}
                                    value=""
                        />
                        <ListItemInput
                                    disabled={false}
                                    label="Topic"
                                    mobile={false}
                                    name="topic"
                                    onChange={[Function]}
                                    value=""
                        />
                        <ListItemInput
                                    disabled={false}
                                    label="Sub topic"
                                    mobile={false}
                                    name="sub_topic"
                                    onChange={[Function]}
                                    value=""
                        />
            </WithStyles(List)>
            <styled.div>
                        <Styled(WithStyles(AppBar))
                                    position="static"
                        >
                                    <WithStyles(Tabs)
                                                fullWidth={false}
                                                indicatorColor="secondary"
                                                onChange={[Function]}
                                                value={0}
                                    >
                                                <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Markdown"
                                                />
                                                <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Preview"
                                                />
                                    </WithStyles(Tabs)>
                        </Styled(WithStyles(AppBar))>
                        <WithStyles(Paper)>
                                    <Textarea
                                                multiline={true}
                                                name="content"
                                                onChange={[Function]}
                                                placeholder="Markdown flavored content here..."
                                                value={undefined}
                                    />
                        </WithStyles(Paper)>
            </styled.div>
</Styled(WithStyles(Paper))>,
          <div>
            <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                        variant="raised"
            >
                        Save
            </WithStyles(Button)>
</div>,
          <WithStyles(Snackbar)
            SnackbarContentProps={
                        Object {
                                    "aria-describedby": "message-id",
                                  }
            }
            anchorOrigin={
                        Object {
                                    "horizontal": "right",
                                    "vertical": "top",
                                  }
            }
            autoHideDuration={3000}
            message={
                        <span
                                    id="message-id"
                        >
                                    Something went wrong :(
                        </span>
            }
            onClose={[Function]}
            open={false}
/>,
        ],
        "mobile": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Heading1>
                Edit article
</Heading1>,
              <WithStyles(List)>
                <ListItemInput
                                disabled={false}
                                label="Title"
                                mobile={false}
                                name="title"
                                onChange={[Function]}
                                value=""
                />
                <ListItemInput
                                disabled={false}
                                label="Topic"
                                mobile={false}
                                name="topic"
                                onChange={[Function]}
                                value=""
                />
                <ListItemInput
                                disabled={false}
                                label="Sub topic"
                                mobile={false}
                                name="sub_topic"
                                onChange={[Function]}
                                value=""
                />
</WithStyles(List)>,
              <styled.div>
                <Styled(WithStyles(AppBar))
                                position="static"
                >
                                <WithStyles(Tabs)
                                                fullWidth={false}
                                                indicatorColor="secondary"
                                                onChange={[Function]}
                                                value={0}
                                >
                                                <WithStyles(Tab)
                                                                disableRipple={true}
                                                                label="Markdown"
                                                />
                                                <WithStyles(Tab)
                                                                disableRipple={true}
                                                                label="Preview"
                                                />
                                </WithStyles(Tabs)>
                </Styled(WithStyles(AppBar))>
                <WithStyles(Paper)>
                                <Textarea
                                                multiline={true}
                                                name="content"
                                                onChange={[Function]}
                                                placeholder="Markdown flavored content here..."
                                                value={undefined}
                                />
                </WithStyles(Paper)>
</styled.div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Edit article",
              },
              "ref": null,
              "rendered": "Edit article",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <ListItemInput
                    disabled={false}
                    label="Title"
                    mobile={false}
                    name="title"
                    onChange={[Function]}
                    value=""
/>,
                  <ListItemInput
                    disabled={false}
                    label="Topic"
                    mobile={false}
                    name="topic"
                    onChange={[Function]}
                    value=""
/>,
                  <ListItemInput
                    disabled={false}
                    label="Sub topic"
                    mobile={false}
                    name="sub_topic"
                    onChange={[Function]}
                    value=""
/>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Title",
                    "mobile": false,
                    "name": "title",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Topic",
                    "mobile": false,
                    "name": "topic",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Sub topic",
                    "mobile": false,
                    "name": "sub_topic",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Styled(WithStyles(AppBar))
                    position="static"
>
                    <WithStyles(Tabs)
                                        fullWidth={false}
                                        indicatorColor="secondary"
                                        onChange={[Function]}
                                        value={0}
                    >
                                        <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Markdown"
                                        />
                                        <WithStyles(Tab)
                                                            disableRipple={true}
                                                            label="Preview"
                                        />
                    </WithStyles(Tabs)>
</Styled(WithStyles(AppBar))>,
                  <WithStyles(Paper)>
                    <Textarea
                                        multiline={true}
                                        name="content"
                                        onChange={[Function]}
                                        placeholder="Markdown flavored content here..."
                                        value={undefined}
                    />
</WithStyles(Paper)>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(Tabs)
                      fullWidth={false}
                      indicatorColor="secondary"
                      onChange={[Function]}
                      value={0}
>
                      <WithStyles(Tab)
                                            disableRipple={true}
                                            label="Markdown"
                      />
                      <WithStyles(Tab)
                                            disableRipple={true}
                                            label="Preview"
                      />
</WithStyles(Tabs)>,
                    "position": "static",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(Tab)
                          disableRipple={true}
                          label="Markdown"
/>,
                        <WithStyles(Tab)
                          disableRipple={true}
                          label="Preview"
/>,
                      ],
                      "fullWidth": false,
                      "indicatorColor": "secondary",
                      "onChange": [Function],
                      "value": 0,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "disableRipple": true,
                          "label": "Markdown",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "disableRipple": true,
                          "label": "Preview",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <Textarea
                      multiline={true}
                      name="content"
                      onChange={[Function]}
                      placeholder="Markdown flavored content here..."
                      value={undefined}
/>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "multiline": true,
                      "name": "content",
                      "onChange": [Function],
                      "placeholder": "Markdown flavored content here...",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="raised"
>
              Save
</WithStyles(Button)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Save",
              "color": "primary",
              "onClick": [Function],
              "variant": "raised",
            },
            "ref": null,
            "rendered": "Save",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "SnackbarContentProps": Object {
              "aria-describedby": "message-id",
            },
            "anchorOrigin": Object {
              "horizontal": "right",
              "vertical": "top",
            },
            "autoHideDuration": 3000,
            "message": <span
              id="message-id"
>
              Something went wrong :(
</span>,
            "onClose": [Function],
            "open": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
